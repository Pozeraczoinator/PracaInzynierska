import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GL.shaders import compileProgram, compileShader
from PIL import Image
import numpy as np
import math
import time
import os

# Vertex Shader (GLSL)
vertex_shader = """
#version 330 core
layout(location = 0) in vec3 aPos;
layout(location = 1) in vec2 aTexCoords;
layout(location = 2) in vec3 offset; // Offset for instancing
out vec2 TexCoords;
void main() {
    gl_Position = vec4(aPos + offset, 1.0);
    TexCoords = aTexCoords;
}
"""

# Fragment Shader (GLSL) for YCbCr to RGB decompression
fragment_shader = """
#version 330 core
in vec2 TexCoords;
out vec4 FragColor;
uniform sampler2D Y_texture;
uniform sampler2D Cb_texture;
uniform sampler2D Cr_texture;

void main() {
    float Y = texture(Y_texture, TexCoords).r;
    float Cb = texture(Cb_texture, TexCoords).r - 0.5;
    float Cr = texture(Cr_texture, TexCoords).r - 0.5;

    float R = Y + 1.402 * Cr;
    float G = Y - 0.344136 * Cb - 0.714136 * Cr;
    float B = Y + 1.772 * Cb;

    FragColor = vec4(R, G, B, 1.0);
}
"""

# Function to load Y, Cb, Cr textures from an image and convert to YCbCr
def create_ycbcr_textures(image_path):
    image = Image.open(image_path).convert('RGB')
    img_data = np.array(image) / 255
    height, width, _ = img_data.shape

    # Konwersja do YCbCr
    Y = 0.299 * img_data[:, :, 0] + 0.587 * img_data[:, :, 1] + 0.114 * img_data[:, :, 2]
    Cb = 0.5 - 0.1687 * img_data[:, :, 0] - 0.3313 * img_data[:, :, 1] + 0.5 * img_data[:, :, 2]
    Cr = 0.5 + 0.5 * img_data[:, :, 0] - 0.4187 * img_data[:, :, 1] - 0.0813 * img_data[:, :, 2]

    # Downsample Cb i Cr do 4:2:0
    Cb_downsampled = (Cb[0::2, 0::2] + Cb[1::2, 0::2] + Cb[0::2, 1::2] + Cb[1::2, 1::2]) / 4
    Cr_downsampled = (Cr[0::2, 0::2] + Cr[1::2, 0::2] + Cr[0::2, 1::2] + Cr[1::2, 1::2]) / 4

    # Normalizacja do zakresu [0, 255]
    Y = (Y * 255).astype(np.uint8)
    Cb_downsampled = (Cb_downsampled * 255).astype(np.uint8)
    Cr_downsampled = (Cr_downsampled * 255).astype(np.uint8)

    #output_dir = "output_components"
    #os.makedirs(output_dir, exist_ok=True)
    #Image.fromarray(Y).save(os.path.join(output_dir, "Y_component.png"))
    #Image.fromarray(Cb_downsampled).save(os.path.join(output_dir, "Cb_component.png"))
    #Image.fromarray(Cr_downsampled).save(os.path.join(output_dir, "Cr_component.png"))

    # Pomocnicza funkcja do tworzenia tekstury
    def load_texture(data, texture_unit, width, height):
        texture_id = glGenTextures(1)
        glActiveTexture(GL_TEXTURE0 + texture_unit)
        glBindTexture(GL_TEXTURE_2D, texture_id)
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RED, width, height, 0, GL_RED, GL_UNSIGNED_BYTE, data)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)
        return texture_id

    Y_texture = load_texture(Y, 0, width, height)
    Cb_texture = load_texture(Cb_downsampled, 1, width // 2, height // 2)
    Cr_texture = load_texture(Cr_downsampled, 2, width // 2, height // 2)

    return Y_texture, Cb_texture, Cr_texture

# Function to create a sphere mesh
def generate_sphere(radius, rings, sectors):
    vertices = []
    texcoords = []
    indices = []

    R = 1.0 / (rings - 1)
    S = 1.0 / (sectors - 1)

    for r in range(rings):
        for s in range(sectors):
            y = math.sin(-math.pi / 2 + math.pi * r * R)
            x = math.cos(2 * math.pi * s * S) * math.sin(math.pi * r * R)
            z = math.sin(2 * math.pi * s * S) * math.sin(math.pi * r * R)

            vertices.append([x * radius, y * radius, z * radius])
            texcoords.append([s * S, r * R])

    for r in range(rings - 1):
        for s in range(sectors - 1):
            indices.extend([
                r * sectors + s,
                r * sectors + (s + 1),
                (r + 1) * sectors + (s + 1),
                r * sectors + s,
                (r + 1) * sectors + (s + 1),
                (r + 1) * sectors + s
            ])

    vertices = np.array(vertices, dtype=np.float32)
    texcoords = np.array(texcoords, dtype=np.float32)
    indices = np.array(indices, dtype=np.uint32)

    return vertices, texcoords, indices

def main():
    pygame.init()
    pygame.display.set_mode((800, 600), DOUBLEBUF | OPENGL)
    glEnable(GL_DEPTH_TEST)

    # Compile and use shaders
    shader = compileProgram(
        compileShader(vertex_shader, GL_VERTEX_SHADER),
        compileShader(fragment_shader, GL_FRAGMENT_SHADER)
    )
    glUseProgram(shader)

    # Load YCbCr textures
    Y_texture, Cb_texture, Cr_texture = create_ycbcr_textures('earthtexture.png')
    glUniform1i(glGetUniformLocation(shader, "Y_texture"), 0)
    glUniform1i(glGetUniformLocation(shader, "Cb_texture"), 1)
    glUniform1i(glGetUniformLocation(shader, "Cr_texture"), 2)

    # Generate sphere
    vertices, texcoords, indices = generate_sphere(1.0, 50, 50)

    # Create offsets for 100 spheres
    offsets = []
    for i in range(10):
        for j in range(10):
            offsets.append([i * 2.5 - 12.5, j * 2.5 - 12.5, 0.0])  # Arrange in a grid
    offsets = np.array(offsets, dtype=np.float32)

    # Initialize buffers
    VAO = glGenVertexArrays(1)
    VBO = glGenBuffers(1)
    TBO = glGenBuffers(1)
    EBO = glGenBuffers(1)
    instanceVBO = glGenBuffers(1)

    glBindVertexArray(VAO)

    glBindBuffer(GL_ARRAY_BUFFER, VBO)
    glBufferData(GL_ARRAY_BUFFER, vertices.nbytes, vertices, GL_STATIC_DRAW)
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, None)
    glEnableVertexAttribArray(0)

    glBindBuffer(GL_ARRAY_BUFFER, TBO)
    glBufferData(GL_ARRAY_BUFFER, texcoords.nbytes, texcoords, GL_STATIC_DRAW)
    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 0, None)
    glEnableVertexAttribArray(1)

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO)
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.nbytes, indices, GL_STATIC_DRAW)

    # Instance offsets
    glBindBuffer(GL_ARRAY_BUFFER, instanceVBO)
    glBufferData(GL_ARRAY_BUFFER, offsets.nbytes, offsets, GL_STATIC_DRAW)
    glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 0, None)
    glEnableVertexAttribArray(2)
    glVertexAttribDivisor(2, 1)  # Make the offsets instanced

# Measure rendering time for exactly 10 minutes
    total_time = 600  # Total time in seconds (10 minutes)
    frame_times = []  # Store individual frame times
    start_time = time.perf_counter()  # Start time
    elapsed_time = 0  # Initialize elapsed time

    while elapsed_time < total_time:
        t1 = time.perf_counter()  # Start frame time
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        glBindVertexArray(VAO)
        glDrawElementsInstanced(GL_TRIANGLES, len(indices), GL_UNSIGNED_INT, None, 100)  # Render 100 spheres
        glFinish()  # Ensure rendering is complete
        t2 = time.perf_counter()  # End frame time

        # Store the frame time
        frame_time = t2 - t1
        frame_times.append(frame_time)

        # Update elapsed time
        elapsed_time = time.perf_counter() - start_time
        print(f"Frame time: {frame_time:.6f} seconds, Elapsed time: {elapsed_time:.2f}/{total_time} seconds")

    # Calculate and print statistics
    avg_render_time = sum(frame_times) / len(frame_times)
    total_render_time = sum(frame_times)
    print(f"Average render time per frame: {avg_render_time:.6f} seconds")
    print(f"Total render time across all frames: {total_render_time:.6f} seconds")
    print(f"Total elapsed time: {elapsed_time:.6f} seconds")

    pygame.display.flip()
    pygame.time.wait(10000)
    pygame.quit()

if __name__ == "__main__":
    main()
