import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GL.shaders import compileProgram, compileShader
from PIL import Image
import numpy as np
import math
import time

# Vertex Shader (GLSL)
vertex_shader = """
#version 330 core
layout(location = 0) in vec3 aPos;
layout(location = 1) in vec2 aTexCoords;
out vec2 TexCoords;
void main() {
    gl_Position = vec4(aPos, 1.0);
    TexCoords = aTexCoords;
}
"""

# Fragment Shader (GLSL) for YCbCr to RGB decompression from a single texture
fragment_shader = """
#version 330 core
in vec2 TexCoords;
out vec4 FragColor;
uniform sampler2D YCbCr_texture;

void main() {
    vec3 ycbcr = texture(YCbCr_texture, TexCoords).rgb;

    float Y = ycbcr.r;
    float Cb = ycbcr.g - 0.5;
    float Cr = ycbcr.b - 0.5;

    float R = Y + 1.402 * Cr;
    float G = Y - 0.344136 * Cb - 0.714136 * Cr;
    float B = Y + 1.772 * Cb;

    FragColor = vec4(R, G, B, 1.0);
}
"""

# Function to convert RGB to YCbCr and create a single texture
def create_ycbcr_texture(image_path):
    image = Image.open(image_path).convert('RGB')
    img_data = np.array(image, dtype=np.uint8)
    height, width, _ = img_data.shape

    # Convert RGB to YCbCr and adjust values to fit in 0-255 range
    xform = np.array([[0.299, 0.587, 0.114],
                      [-0.168736, -0.331264, 0.5],
                      [0.5, -0.418688, -0.081312]])
    ycbcr = img_data.dot(xform.T)
    ycbcr[:, :, [1, 2]] += 128  # Shift Cb and Cr to the 0-255 range

    # Ensure data is in the range [0, 255] and cast to uint8
    ycbcr = np.clip(ycbcr, 0, 255).astype(np.uint8)

    # Create a single OpenGL texture with Y, Cb, Cr channels
    texture_id = glGenTextures(1)
    glBindTexture(GL_TEXTURE_2D, texture_id)
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, ycbcr)
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)

    return texture_id

# Sphere rendering function
def generate_sphere(radius, rings, sectors):
    vertices = []
    texcoords = []
    indices = []

    R = 1.0 / (rings - 1)
    S = 1.0 / (sectors - 1)

    for r in range(rings):
        for s in range(sectors):
            y = math.sin(-math.pi / 2 + math.pi * r * R)
            x = math.cos(2 * math.pi * s * S) * math.sin(math.pi * r * R)
            z = math.sin(2 * math.pi * s * S) * math.sin(math.pi * r * R)

            vertices.append([x * radius, y * radius, z * radius])
            texcoords.append([s * S, r * R])

    for r in range(rings - 1):
        for s in range(sectors - 1):
            indices.append(r * sectors + s)
            indices.append(r * sectors + (s + 1))
            indices.append((r + 1) * sectors + (s + 1))

            indices.append(r * sectors + s)
            indices.append((r + 1) * sectors + (s + 1))
            indices.append((r + 1) * sectors + s)

    vertices = np.array(vertices, dtype=np.float32)
    texcoords = np.array(texcoords, dtype=np.float32)
    indices = np.array(indices, dtype=np.uint32)

    return vertices, texcoords, indices

def main():
    pygame.init()
    pygame.display.set_mode((800, 600), DOUBLEBUF | OPENGL)
    glEnable(GL_DEPTH_TEST)

    # Compile shaders
    shader = compileProgram(
        compileShader(vertex_shader, GL_VERTEX_SHADER),
        compileShader(fragment_shader, GL_FRAGMENT_SHADER)
    )
    glUseProgram(shader)

    # Load YCbCr texture
    YCbCr_texture = create_ycbcr_texture('earthtexture.png')
    glUniform1i(glGetUniformLocation(shader, "YCbCr_texture"), 0)

    # Generate sphere
    vertices, texcoords, indices = generate_sphere(1.0, 50, 50)

    # Initialize buffers
    VAO = glGenVertexArrays(1)
    VBO = glGenBuffers(1)
    TBO = glGenBuffers(1)
    EBO = glGenBuffers(1)

    glBindVertexArray(VAO)

    glBindBuffer(GL_ARRAY_BUFFER, VBO)
    glBufferData(GL_ARRAY_BUFFER, vertices.nbytes, vertices, GL_STATIC_DRAW)
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, None)
    glEnableVertexAttribArray(0)

    glBindBuffer(GL_ARRAY_BUFFER, TBO)
    glBufferData(GL_ARRAY_BUFFER, texcoords.nbytes, texcoords, GL_STATIC_DRAW)
    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 0, None)
    glEnableVertexAttribArray(1)

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO)
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.nbytes, indices, GL_STATIC_DRAW)

    # Main timing loop
    frame_times = []
    total_frames = 1000  # Number of frames to measure

    for frame_idx in range(total_frames):
        t1 = time.perf_counter()  # Start time in microseconds
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        glBindVertexArray(VAO)
        
        glDrawElements(GL_TRIANGLES, len(indices), GL_UNSIGNED_INT, None)
        glFinish()  # Ensure rendering is complete
        t2 = time.perf_counter()  # End time

        frame_time = (t2 - t1) * 1e6
        frame_times.append(frame_time)

    # Calculate average render time
    avg_render_time = sum(frame_times) / total_frames
    print(f"Average render time per frame: {avg_render_time:.2f} microseconds")

    pygame.display.flip()
    pygame.time.wait(10000)
    pygame.quit()

if __name__ == "__main__":
    main()
